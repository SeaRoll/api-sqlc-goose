// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: books.queries.sql

package db

import (
	"context"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books
(id, title, author, description, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id, title, author, description, created_at, updated_at
`

type CreateBookParams struct {
	ID          []byte `json:"id"`
	Title       string `json:"title"`
	Author      string `json:"author"`
	Description string `json:"description"`
	CreatedAt   int64  `json:"createdAt"`
	UpdatedAt   int64  `json:"updatedAt"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.queryRow(ctx, q.createBookStmt, createBook,
		arg.ID,
		arg.Title,
		arg.Author,
		arg.Description,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBooks = `-- name: GetBooks :many
SELECT id, title, author, description, created_at, updated_at FROM books
`

func (q *Queries) GetBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.query(ctx, q.getBooksStmt, getBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Book{}
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
